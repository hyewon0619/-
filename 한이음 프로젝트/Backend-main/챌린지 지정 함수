# 챌린지 제공 함수
def create_plan_for_chat_room(level, chat_room_id, number):
    # 레벨에 따른 단계 범위 비율 정의
    level_ranges = {
        '하': (0, 0.40),
        '중': (0.30, 0.70),
        '상': (0.60, 1.00)
    }

    # 단계 비율을 가져옴
    if level not in level_ranges:
        return {"error": "잘못된 레벨입니다."}

    min_ratio, max_ratio = level_ranges[level]

    # 모든 요리 계획을 단계 기준으로 가져오고 스텝 값으로 오름차순 정렬
    all_plans = CookingPlan.query.order_by(CookingPlan.step).all()

    if not all_plans:
        return {"error": "요리 계획이 없습니다."}

    # 전체 단계 범위
    min_step = all_plans[0].step
    max_step = all_plans[-1].step

    # 레벨에 따른 단계 범위 설정
    min_step_value = min_step + (max_step - min_step) * min_ratio
    max_step_value = min_step + (max_step - min_step) * max_ratio

    # 단계 범위에 따라 필터링
    filtered_plans = [plan for plan in all_plans if min_step_value <= plan.step <= max_step_value]

    if not filtered_plans:
        return {"error": "선택된 단계 범위의 요리 계획이 없습니다."}

    # n개 항목을 랜덤으로 선택
    selected_plans = random.sample(filtered_plans, min(number, len(filtered_plans)))

    # 선택된 계획을 Plan 테이블에 추가
    for idx, plan in enumerate(selected_plans, start=1):
        new_plan = Plan(
            cooking_plan_id=plan.id,
            chat_room_id=chat_room_id,
            goal_number=idx,
            hobby='요리'
        )
        db.session.add(new_plan)

    db.session.commit()  # 선택된 계획들을 Plan 테이블에 저장

    return {"success": True}
