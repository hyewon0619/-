import re
from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, Numeric
from sqlalchemy.orm import sessionmaker, declarative_base, relationship

# 데이터베이스 설정
DATABASE_URI = 'mysql+pymysql://admin:today0430@database-1.cva6yg8oenlg.ap-northeast-2.rds.amazonaws.com/mentosdb'
engine = create_engine(DATABASE_URI)
Session = sessionmaker(bind=engine)
Base = declarative_base()

# CookingPlan 테이블 정의
class CookingPlan(Base):
    __tablename__ = 'cooking_plan'

    id = Column(Integer, primary_key=True, autoincrement=True)
    dish_name = Column(String(100), nullable=False)
    ingredients = Column(Text, nullable=False)
    tools = Column(Text, nullable=False)
    method = Column(Text, nullable=False)
    step = Column(Numeric(8, 4), nullable=True)

    methods = relationship('Method', back_populates='cooking_plan')

# Method 테이블 정의
class Method(Base):
    __tablename__ = 'method'

    id = Column(Integer, primary_key=True, autoincrement=True)
    cooking_plan_id = Column(Integer, ForeignKey('cooking_plan.id'), nullable=False)
    step_number = Column(Integer, nullable=False)
    description = Column(Text, nullable=False)

    cooking_plan = relationship('CookingPlan', back_populates='methods')

def parse_and_insert_methods(session):
    # 모든 요리 계획을 조회
    cooking_plans = session.query(CookingPlan).all()

    for plan in cooking_plans:
        method_text = plan.method
        if not method_text:
            continue

        # 단계별로 분리 (예: 1. ~ 2. ~ ...)
        steps = re.split(r'\d+\.\s*', method_text)
        steps = [step.strip() for step in steps if step.strip()]

        # 각 단계에 대해 Method 테이블에 삽입
        for i, step_description in enumerate(steps):
             # 단계 번호와 공백을 제거
            clean_description = re.sub(r'^\d+\.\s*', '', step_description).strip()
            method_entry = Method(
                cooking_plan_id=plan.id,
                step_number=i + 1,  # 단계 번호는 1부터 시작
                description=clean_description
            )
            session.add(method_entry)
    
    session.commit()
    print("Methods inserted successfully")

# 메소드 삽입 함수 호출
if __name__ == '__main__':
    session = Session()
    try:
        parse_and_insert_methods(session)
    finally:
        session.close()
